#!/usr/bin/env node

var dir = require('node-dir');
var fs = require('fs');
var Q = require('q');
var argv = require('minimist')(process.argv);
var Extractor = require('angular-gettext-tools').Extractor;

if (!argv.dest) {
  throw 'dest parameter missed';
}

var dirConfig = {
  match: argv.match ? new RegExp(argv.match) : /\.html$/,
  matchDir: argv.matchDir,
};

if (argv.exclude) {
  dirConfig.exclude = new RegExp(argv.exclude);
}

var gettextExtractor = new Extractor({
  markerName: argv['marker-name']
});

function processDir (dirName, extractor){
  var deferred = Q.defer();

  dir.readFiles(dirName, dirConfig, function onReadFile(err, content, filename, next) {
        if (err) {
          throw err;
        }
        extractor.parse(filename, content);
        next();
      },
      function onFinish(err, files){
        if (err) throw err;

        console.log('Finished parsing ' + dirName +', read '+files.length+' files.');
        deferred.resolve();
      }
  );

  return deferred.promise;
}

var base = argv.base;

if (typeof base === 'string'){
  base = [basePath];
}

var processPromises = base.map(function (basePath) {
    return processDir(basePath, gettextExtractor)
  });

Q.all(processPromises).then(function () {
    fs.writeFile(argv.dest, gettextExtractor.toString(), null, function (err) {
      if (err){
        throw err;
      }
      console.log('All files processed, stored in a file '+argv.dest);
    });
});

