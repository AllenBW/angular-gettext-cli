#!/usr/bin/env node

var glob = require("glob")
var fs = require('fs');
var argv = require('minimist')(process.argv);

//Rewriting esprima dependency to espree, which supports es6
var rewire = require("rewire");
var Extractor = rewire('angular-gettext-tools/lib/extract');
var Espree = require('espree');
Extractor.__set__("esprima", Espree);

//Monkey patching "parse" call to add ecmaFeatures to options
var oldParse = Espree.parse;
Espree.parse = function (file, options) {
    options.ecmaFeatures = {

        // enable parsing of arrow functions
        arrowFunctions: true,

        // enable parsing of let/const
        blockBindings: true,

        // enable parsing of destructured arrays and objects
        destructuring: true,

        // enable parsing of regular expression y flag
        regexYFlag: true,

        // enable parsing of regular expression u flag
        regexUFlag: true,

        // enable parsing of template strings
        templateStrings: true,

        // enable parsing of binary literals
        binaryLiterals: true,

        // enable parsing of ES6 octal literals
        octalLiterals: true,

        // enable parsing unicode code point escape sequences
        unicodeCodePointEscapes: true,

        // enable parsing of default parameters
        defaultParams: true,

        // enable parsing of rest parameters
        restParams: true,

        // enable parsing of for-of statement
        forOf: true,

        // enable parsing computed object literal properties
        objectLiteralComputedProperties: true,

        // enable parsing of shorthand object literal methods
        objectLiteralShorthandMethods: true,

        // enable parsing of shorthand object literal properties
        objectLiteralShorthandProperties: true,

        // Allow duplicate object literal properties (except '__proto__')
        objectLiteralDuplicateProperties: true,

        // enable parsing of generators/yield
        generators: true,

        // enable parsing spread operator
        spread: true,

        // enable parsing classes
        classes: true,

        // enable parsing of modules
        modules: true,

        // enable React JSX parsing
        jsx: true,

        // enable return in global scope
        globalReturn: true
    }
    return oldParse.apply(Espree, arguments);
};

if (!argv.dest) {
    throw 'dest parameter missed';
}

var gettextExtractor = new Extractor({
    markerName: argv['marker-name']
});


glob(argv.files, null, function (err, fileNames) {
    if (err) {
        throw err;
    }
    fileNames.forEach(function (filename) {
        var content = fs.readFileSync(filename, 'utf8');

        gettextExtractor.parse(filename, content);
    });
}).on('end', function finish(fileNames) {
    console.log('Finished parsing ' + argv.files + ', read ' + fileNames.length + ' files.');

    fs.writeFile(argv.dest, gettextExtractor.toString(), null, function (err) {
        if (err) {
            throw err;
        }
        console.log('All files processed, stored in a file ' + argv.dest);
    });
});
